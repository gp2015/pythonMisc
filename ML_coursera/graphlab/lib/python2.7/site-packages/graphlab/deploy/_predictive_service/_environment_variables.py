'''
Environment Variables management for Predictive Service
'''
from copy import copy as _copy
from logging import getLogger as _getLogger

_logger = _getLogger(__name__)

class EnvironmentVariables(object):
    '''
    Environment Variables management for the Predictive Service
    '''
    def __init__(self):
        self._variables = {}
        self._original_value = {}
        self._dirty = False

    def set(self, key, value):
        '''
        Set an environment variable. In order to become effective in the service,
        you still need to call `apply_changes`.

        Parameters
        ----------
        key : str
            Environment variable name

        value : str
            Environment variable value
        '''
        self._variables.update({str(key): str(value)})
        self._dirty = True

        _logger.info("Environment variable '%s' is added. Use apply_changes() to deploy "
            "all pending changes, or continue with other modifications." % (key))

    def unset(self, key):
        '''
        Unset an environment variable. In order to become effective in the service,
        you still need to call `apply_changes`.

        Parameters
        ----------
        key : str
            Environment variable name
        '''
        del self._variables[str(key)]
        self._dirty = True

        _logger.info("Environment variable '%s' is deleted. Use apply_changes() to deploy "
            "all pending changes, or continue with other modifications." % (key))

    def get(self, key):
        '''
        Get the deployed value of an environment variable.

        Parameters
        ----------
        key : str
            Environment variable name
        '''
        return self._original_value.get(str(key), None)

    def _reset(self):
        '''
        Reset the environment variables to initial value
        '''
        self._variables = self._original_value
        self._clear_dirty()

    def _clear(self):
        '''
        Clear all environment variables
        '''
        self._dirty = True
        self._variables = {}

    def list(self):
        '''
        List all environment variables that have been deployed to the service.

        Returns
        ----------
        out : dict
            A dictionary where keys are environment variable names and values
            are their values.

        You can retrieve the deployed variables together with all pending ones
        using the `environment_variables` property.
        '''
        return self._original_value

    @classmethod
    def _read_from_config_file(cls, config_parser, section_name):
        '''
        Read environment variables from a config file

        Parameters
        ----------
        config_parser : ConfigParser
            The config parser object ot read config from

        section_name : str
            The section to read the config from

        Returns
        -------
        out : EnvironmentVariables
            An instance of EnvironmentVariables class.
        '''
        items = config_parser.items(section_name) \
            if config_parser.has_section(section_name) else []

        new_obj = EnvironmentVariables()
        [new_obj.set(key, value) for (key, value) in items]

        # Keep original value so that we give user a chance to revert back to
        # original value using reset()
        new_obj._clear_dirty()

        return new_obj

    def _write_to_config_file(self, config_writer, section_name):
        '''
        Write current environment variables to a config file

        Parameters
        ----------
        config_writer : ConfigParser
            The config parser object ot write config to

        section_name : str
            The section to write the config to

        Returns
        -------
        None
        '''
        for k, v in self._variables.iteritems():
            config_writer.set(section_name, k, v)

        self._clear_dirty()

    def _clear_dirty(self):
        '''
        Clear the dirty flag after the value has been persisted
        '''
        # Make a new copy of the persisted value
        self._original_value = _copy(self._variables)
        self._dirty = False

    def __str__(self):
        result = 'Deployed environment variables:\n'

        # all variables that have been applied already:
        for k, v in sorted(self._original_value.iteritems()):
            result += '\t%s = %s\n' % (k, v)

        # do we have any pending variables?
        if self._dirty:
            result += '\nPending environment variable changes:\n'
            for k, v in sorted(self._variables.iteritems()):
                # print the ones that are either not deployed yet or
                # have a new value
                if (k not in self._original_value) or (self._original_value.get(k) is not v):
                    result += '\t%s = %s\n' % (k, v)

        return result

    def __repr__(self):
        return self.__str__()
